@model TwitterWebMVC.ViewModels.TBTViewModel

@{
    ViewData["Title"] = "TBTHome";
}

@* TODO 9 Clean up navigation bar *@
<h1>#TBT Data</h1>

@* TODO Add SVG Twitter bird image*@
<h2>There have been <strong>@Model.TotalTweets</strong> #TBT Tweets</h2>

@{
    Random rnd = new Random();
    List<int> tweetDataList = new List<int>();
    string TweetColor = String.Format("rgba({0},{1},{2},0.6)", rnd.Next(256), rnd.Next(256), rnd.Next(256));
    for (int i = 0; i < Model.TweetsPerHour.Count(); i++)
    {
        tweetDataList.Add(Model.TweetsPerHour[i]);
    }
}

<canvas id="TweetsPerHourChart"></canvas>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.2.2/Chart.bundle.min.js"></script>
<script>
    var ctx = document.getElementById("TweetsPerHourChart");
    var TweetsPerHourChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["12am", "1am", "2am", "3am", "4am", "5am",
                "7am", "8am", "9am", "10am", "11am", "12pm",
                "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm",
                "8pm", "9pm", "10pm", "11pm"],
            datasets: [{
                label: '# of Tweets',
                backgroundColor: "@TweetColor",
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(tweetDataList)),
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }, 
            responsive: true,
            maintainAspectRatio: true
        }
    });
</script>
<br />
<h2>in <strong>@Model.TotalLanguages</strong> different languages</h2>
@{
    List<string> languageNameList = new List<string>();
    List<int> timesUsedList = new List<int>();
    List<string> colorList = new List<string>();
    List<int> borderList = new List<int>();

    for (int i = 0; i < Model.TweetsPerHour.Count(); i++)
    {
        tweetDataList.Add(Model.TweetsPerHour[i]);
    }

    foreach (var langauge in Model.Languages)
    {
        languageNameList.Add(langauge.Name);
        timesUsedList.Add(langauge.TimesUsed);
        colorList.Add(String.Format("rgba({0},{1},{2},0.6)", rnd.Next(256), rnd.Next(256), rnd.Next(256)));
        borderList.Add(0);
    }
}

<canvas id="LanguagePieChart"></canvas>

@* TODO 10 Add Languages in order of occurence label*@
<script>
    var ctx = document.getElementById("LanguagePieChart");
    var LanguagePieChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(languageNameList)),
            datasets: [{
                backgroundColor: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(colorList)),
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(timesUsedList)),
                borderWidth: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(borderList))
            }]
        },
        options: {
            segmentShowStroke: false,
            responsive: true,
            maintainAspectRatio: true
        }
    });
</script>

<br />
<h2>with <strong>@Model.TotalHashtags</strong> unique accompanying Hashtags</h2>
<table class="table">

    <tr>
        <th>Top 10</th>
        <th>Times Used</th>
    </tr>

    @for (int i = 1; i < 11; i++)
    {
        <tr>
            <td>@Model.Hashtags[i].Name</td>
            <td>@Model.Hashtags[i].TimesUsed</td>
        </tr>
    }
</table>


